<script>
    //Gráficos
    //Gráfico Stacks
    const getStack = async (StackActivos) => {
        let alldata = StackActivos
        let CutData = alldata.slice(0, 2);
        let CutX = alldata.slice(2)
        //Aplanar el array, quitando profundidad
        let x = CutX.flat()
        let ColumnsNames =[]
        for(i=0; i < CutData[0].length ; i++){
	    ColumnsNames.push(x[i][1])

        }

        //const response = await axios.get("/charts/chartsStacksActivos")
        //let data1 = response.data
        Plotly.newPlot(
            "myDiv1",
            [
                {
                    x: ColumnsNames,
                    y: CutData[1],
                    type: "bar",
                    name: "Activos no corrientes",
                    xaxis: "x1",
                    barmode: "stack",
                    marker: { color: "#008080" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[0],
                    type: "bar",
                    name: "Activos corrientes",
                    xaxis: "x1",
                    barmode: "stack",
                    marker: { color: "#00c3af" },
                },
            ],
            {
                barmode: "stack",
                yaxis: { tickformat: ".0%" },
                xaxis: {
                    domain: [0, 1],
                    anchor: "x1",
                },
            }
        );
    }


    const getStackPasivo = async (StackPasivos) => {

        let alldata = StackPasivos
        let CutData = alldata.slice(0, 3);
        let CutX = alldata.slice(3)
        //Aplanar el array, quitando profundidad
        let x = CutX.flat()
        let ColumnsNames =[]
        for(i=0; i < CutData[0].length ; i++){
	    ColumnsNames.push(x[i][1])
        }
        

        Plotly.newPlot(
            "myDiv2",
            [
                {
                    x: ColumnsNames,
                    y: CutData[2],
                    type: "bar",
                    name: "Patrimonio",
                    xaxis: "x1",
                    barmode: "stack",
                    marker: { color: "#1810F0" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[1],
                    type: "bar",
                    name: "Pasivos no corrientes",
                    xaxis: "x1",
                    barmode: "stack",
                    marker: { color: "#352EF2" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[0],
                    type: "bar",
                    name: "Pasivos Corrientes",
                    xaxis: "x1",
                    barmode: "stack",
                    marker: { color: "#524CF4" },
                }
            ],
            {
                barmode: "stack",
                yaxis: { tickformat: ".0%" },
                xaxis: {
                    domain: [0, 1],
                    anchor: "x1",

                },
            }
        );
    }


    //Liquidez

    const getStackLiquidez = async (chartLiquidez) => {
        let alldata = chartLiquidez
        let CutData = alldata.slice(0, 2);
        let CutX = alldata.slice(2)
        //Aplanar el array, quitando profundidad
        let x = CutX.flat()
        let ColumnsNames =[]
        for(i=0; i < CutData[0].length ; i++){
	    ColumnsNames.push(x[i][1])
        }
        //const response = await axios.get("/charts/chartLiquidez")
        //let data1 = response.data
        Plotly.newPlot(
            "myDiv3",
            [
                {
                    x: ColumnsNames,
                    y: CutData[0],
                    type: "bar",
                    name: "Activos Corrientes",
                    marker: { color: "#1088F0" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[1],
                    type: "bar",
                    name: "Pasivos corrientes",
                    marker: { color: "#F01088" },
                },
            ],
            {
                barmode: "group",
            }
        );
    }



    // R Liquidez R Acida

    const getRLiquidezRAcida = async (RLiquidezRAcida) => {
        let alldata = RLiquidezRAcida
        let CutData = alldata.slice(0, 2);
        let CutX = alldata.slice(2)
        //Aplanar el array, quitando profundidad
        let x = CutX.flat()
        let ColumnsNames =[]
        for(i=0; i < CutData[0].length ; i++){
	    ColumnsNames.push(x[i][1])
        }

        //const response = await axios.get("/charts/RLiquidezRAcida")
        //let data1 = response.data

        Plotly.newPlot(
            "myDiv4",
            [
                {
                    x: ColumnsNames,
                    y: CutData[0],
                    type: "bar",
                    name: "Razón de Liquidez",
                    marker: { color: "#106BF0" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[1],
                    type: "bar",
                    name: "Razón Ácida",
                    marker: { color: "#727D8E" },
                },
            ],
            {
                barmode: "group",
            }
        );
    }





    // KdeTrabajo 

    const getKdeTrabajo = async (KdeTrabajo) => {
        
        let alldata = KdeTrabajo
        let CutData = alldata.slice(0, 1);
        let CutX = alldata.slice(1)
        
        //Aplanar el array, quitando profundidad
        let x = CutX.flat()
        let ColumnsNames =[]
        for(i=0; i < CutData[0].length ; i++){
	    ColumnsNames.push(x[i][1])
        }
        //const response = await axios.get("/charts/KdeTrabajo")
        //let data1 = response.data
    
        Plotly.newPlot(
            "myDiv5",
            [
                {
                    x: ColumnsNames,
                    y: CutData[0],
                    type: "bar",
                    name: "Capital de Trabajo",
                    marker: { color: "#106BF0" },
                },
            ],
            {
                barmode: "group",
            }
        );
    }

    

    //Rentabilidad

    const getRentabilidad = async (Rentabilidad) => {
         let alldata = Rentabilidad
        let CutData = alldata.slice(0, 3);
        let CutX = alldata.slice(3)
        //Aplanar el array, quitando profundidad
        let x = CutX.flat()
        let ColumnsNames =[]
        for(i=0; i < CutData[0].length ; i++){
	    ColumnsNames.push(x[i][1])
        }
        
        //const response = await axios.get("/charts/Rentabilidad")
        //let data1 = response.data

        Plotly.newPlot(
            "myDiv6",
            [
                {
                    x: ColumnsNames,
                    y: CutData[0],
                    type: "scatter",
                    name: "Ingresos de actividades ordinarias",
                    marker: { color: "#106BF0" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[1],
                    type: "scatter",
                    name: "Ganancia bruta",
                    marker: { color: "#727D8E" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[2],
                    type: "scatter",
                    name: "Actividad Operacional",
                    marker: { color: "#F01010" },
                },
            ],
        );
    }



    // EBITDA

    const getEBITDA = async (EBITDA) => {
         let alldata = EBITDA
        let CutData = alldata.slice(0, 1);
        let CutX = alldata.slice(1)
        //Aplanar el array, quitando profundidad
        let x = CutX.flat()
        let ColumnsNames =[]
        for(i=0; i < CutData[0].length ; i++){
	    ColumnsNames.push(x[i][1])
        }
        
        //const response = await axios.get("/charts/EBITDA")
        //let data1 = response.data

        Plotly.newPlot(
            "myDiv7",
            [
                {
                    x: ColumnsNames,
                    y: CutData[0],
                    type: "bar",
                    name: "Capital de Trabajo",
                    marker: { color: "#7C8E72" },
                },
            ],
            {
                barmode: "group",
            }
        );
    }



    // Razon de endeudamiento

    const getREndeudamiento = async (REndeudamiento) => {
        let alldata = REndeudamiento
        let CutData = alldata.slice(0, 2);
        let CutX = alldata.slice(2)
        //Aplanar el array, quitando profundidad
        let x = CutX.flat()
        let ColumnsNames =[]
        for(i=0; i < CutData[0].length ; i++){
	    ColumnsNames.push(x[i][1])
        }
        
        
        
        //const response = await axios.get("/charts/REndeudamiento")
        //let data1 = response.data

        Plotly.newPlot(
            "myDiv8",
            [
                {
                    x: ColumnsNames,
                    y: CutData[0],
                    type: "bar",
                    name: "Corto Plazo",
                    marker: { color: "#7C8E72" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[1],
                    type: "bar",
                    name: "Largo Plazo",
                    marker: { color: "#F01010" },
                },
            ],
            {
                barmode: "stack",
            }
        );
    }



    // Ciclo conversión Efectivo

    const getCCE = async (CCE) => {
        let alldata = CCE
        let CutData = alldata.slice(0, 4);
        let CutX = alldata.slice(4)
        //Aplanar el array, quitando profundidad
        let x = CutX.flat()
        let ColumnsNames =[]
        for(i=0; i < CutData[0].length ; i++){
	    ColumnsNames.push(x[i][1])
        }

        //const response = await axios.get("/charts/CCE")
        //let data1 = response.data

        Plotly.newPlot(
            "myDiv9",
            [
                {
                    x: ColumnsNames,
                    y: CutData[0],
                    type: "scatter",
                    name: "Plazo Promedio de Proveedores",
                    marker: { color: "#BFF010" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[1],
                    type: "scatter",
                    name: "Plazo Promedio Existencias",
                    marker: { color: "#F0B110" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[2],
                    type: "scatter",
                    name: "Plazo Promedio de Cobro",
                    marker: { color: "#F04110" },
                },
                {
                    x: ColumnsNames,
                    y: CutData[3],
                    type: "bar",
                    name: "Ciclo de Caja",
                    marker: { color: "#F01017" },
                }
            ],
        );
    }




</script>